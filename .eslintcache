[{"/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/index.js":"1","/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/App.js":"2","/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/InputLine.js":"3","/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/AmountInput.js":"4","/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/UnitInput.js":"5","/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/IngredientInput.js":"6","/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/InputField.js":"7"},{"size":146,"mtime":1612069013290,"results":"8","hashOfConfig":"9"},{"size":1278,"mtime":1612156257765,"results":"10","hashOfConfig":"9"},{"size":839,"mtime":1612156066925,"results":"11","hashOfConfig":"9"},{"size":692,"mtime":1612156207955,"results":"12","hashOfConfig":"9"},{"size":896,"mtime":1612156214045,"results":"13","hashOfConfig":"9"},{"size":711,"mtime":1612156196265,"results":"14","hashOfConfig":"9"},{"size":2335,"mtime":1612155269015,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ymru7u",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/index.js",[],["33","34"],"/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/App.js",["35"],"import React, { useState } from 'react';\nimport InputField from './components/InputField';\nimport './styles/recipe.css';\n\nconst App = () => {\n\n  const [recipeList, setRecipeList] = useState([\n    {\n      id: 1,\n      amount: \"2\",\n      unit: \"ea\",\n      ingredient: \"Onions\",\n    },\n    {\n      id: 2,\n      amount: \"4\",\n      unit: \"Tbsp\",\n      ingredient: \"AP Flour\",\n    },\n    {\n      id: 3,\n      amount: \"1/2\",\n      unit: \"cup(s)\",\n      ingredient: \"Butter\",\n    },\n    {\n      id: 4,\n      amount: \"\",\n      unit: \"\",\n      ingredient: \"\",\n    }\n  ]);\n\n  return (\n    <div className=\"container recipe-box\">\n      <div className=\"row my-2\">\n        <div className=\"col-12\"><h2>Recipe Name</h2></div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-2 gx-1 px-2\">Amount</div>\n        <div className=\"col-2 gx-1 px-2\">Unit</div>\n        <div className=\"col-8 gx-1 px-2\">Ingredient</div>\n      </div>\n      <InputField data={recipeList} />\n      \n      <div className=\"row pt-4\">\n        <div className=\"col-12 gx-1\">Procedure</div>\n      </div>\n      <div className=\"row py-1\">\n        <div className=\"col-12 gx-1\">\n          <textarea className=\"form-control\" rows=\"3\"></textarea>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/InputLine.js",[],"/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/AmountInput.js",[],"/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/UnitInput.js",[],"/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/IngredientInput.js",[],"/home/ngasser/workspace/ReactWorkspace/dev/recipe-form-mock-2/src/components/InputField.js",["36","37"],"import React, { useState, useEffect } from 'react';\nimport InputLine from './InputLine';\n\nconst InputField = ({ data }) => {\n  const [items, setItems] = useState(data);\n  const [output, setOutput] = useState([]);\n  const [focusInputs, setFocusInputs] = useState([]);\n  \n  // run once on load\n  useEffect(() => {\n    setOutput(renderInputs(items, focusInputs));\n    const focusToEdit = items.map((item) => {\n      return false;\n    })\n    focusToEdit[focusToEdit.length - 1] = true;\n    setFocusInputs(focusToEdit);\n  },[]);\n\n  useEffect(() => {\n    setOutput(renderInputs(items, focusInputs));\n  },[items, focusInputs]);\n\n  const deleteEmptyInputs = (arrInputs) => {\n    if (!arrInputs[arrInputs.length - 1].amount &&\n      !arrInputs[arrInputs.length - 1].ingredient &&\n      !arrInputs[arrInputs.length - 2].amount &&\n      !arrInputs[arrInputs.length - 2].ingredient) {\n      \n      arrInputs.pop();\n      return deleteEmptyInputs(arrInputs);\n    } else {\n      return arrInputs;\n    }\n  };\n\n  const handleTyping = (id, field, value) => {\n    const itemsToEdit = [...items];\n    itemsToEdit[id - 1][field] = value;\n    // add a new input line at bottom\n    if (id === itemsToEdit.length) {\n      itemsToEdit.push({\n        id: itemsToEdit.length + 1,\n        amount: \"\",\n        unit: \"\",\n        ingredient: \"\",\n      });\n    }\n    // remove an input line from the bottom\n    if (id === itemsToEdit.length - 1 &&\n      !value &&\n      !itemsToEdit[itemsToEdit.length - 2].amount &&\n      !itemsToEdit[itemsToEdit.length - 2].ingredient) {\n      itemsToEdit.pop();\n    }\n    setItems(deleteEmptyInputs(itemsToEdit));\n  };\n\n  const handleKeyDown = (event, id) => {\n    if (event.key === \"Enter\") {\n      console.log(\"enter!\");\n    }\n  };\n\n  const handleFocus = (id) => {\n    const focusToEdit = [...focusInputs];\n    focusToEdit.fill(false);\n    focusToEdit[id - 1] = true;\n    setFocusInputs(focusToEdit);\n  }\n\n  const renderInputs = (itemArr, focusArr) => {\n    return (\n      itemArr.map((item) => {\n        return (\n          <InputLine\n            data={item}\n            handleTyping={handleTyping}\n            handleKeyDown={handleKeyDown}\n            handleFocus={handleFocus}\n            focus={focusArr[item.id - 1]}\n          />);\n      })\n    )\n  };\n\n  return (\n    <div>{output}</div>\n  );\n};\n\nexport default InputField;",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":7,"column":22,"nodeType":"44","messageId":"45","endLine":7,"endColumn":35},{"ruleId":"46","severity":1,"message":"47","line":17,"column":5,"nodeType":"48","endLine":17,"endColumn":7,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":21,"column":5,"nodeType":"48","endLine":21,"endColumn":25,"suggestions":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'setRecipeList' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'focusInputs', 'items', and 'renderInputs'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setOutput' needs the current value of 'items'.","ArrayExpression",["54"],"React Hook useEffect has a missing dependency: 'renderInputs'. Either include it or remove the dependency array.",["55"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},"Update the dependencies array to be: [focusInputs, items, renderInputs]",{"range":"60","text":"61"},"Update the dependencies array to be: [items, focusInputs, renderInputs]",{"range":"62","text":"63"},[519,521],"[focusInputs, items, renderInputs]",[598,618],"[items, focusInputs, renderInputs]"]